{
  "name": "node-geocoder",
  "version": "1.1.0",
  "description": "node geocoding library, supports google maps, mapquest, open street map, ...",
  "main": "lib/geocoderfactory.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nchaulet/node-geocoder.git"
  },
  "keywords": [
    "geocoder",
    "geo",
    "google",
    "maps",
    "mapquest"
  ],
  "author": {
    "name": "nchaulet"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nchaulet/node-geocoder/issues"
  },
  "dependencies": {},
  "devDependencies": {
    "chai": "~1.8",
    "mocha": "~1.14",
    "sinon": "~1.7",
    "requestify": "~0.1"
  },
  "readme": "# node-geocoder\n\n[![Build Status](https://travis-ci.org/nchaulet/node-geocoder.png?branch=master)](https://travis-ci.org/nchaulet/node-geocoder)\n\nNode library for geocoding and reverse geocoding\n\nCurrently in development\n\n## Installation\n\n    npm install node-geocoder\n\n## Usage example\n\n```javascript\nvar geocoderProvider = 'google';\nvar httpAdapter = 'http';\n// optionnal\nvar extra = {\n    apiKey: 'YOUR_API_KEY', // for map quest\n    formatter: null         // 'gpx', 'string', ...\n};\n\nvar geocoder = require('node-geocoder').getGeocoder(geocoderProvider, httpAdapter, extra);\n\ngeocoder.geocode('29 champs elysée paris', function(err, res) {\n    console.log(res);\n});\n\n// output :\n[{\n    latitude: 48.8698679,\n    longitude: 2.3072976,\n    country: 'France',\n    countryCode: 'FR',\n    city: 'Paris',\n    zipcode: '75008',\n    streetName: 'Champs-Élysées',\n    streetNumber: '29',\n    state: 'Île de France',\n    stateCode: 'IDF'\n}]\n```\n\n## Geocoder Provider\n\n* `google` : GoogleGeocoder support address geocoding and reverse geocoding, use `extra.clientId`and `extra.apiKey`(privateKey)for business licence, you can also use `extra.language` for specify language\n* `freegeoip` : FreegeoipGeocoder support ip geocoding\n* `datasciencetoolkit` : DataScienceToolkitGeocoder supports ip v4 geocoding and address geocoding\n* `openstreetmap` : OpenStreetMapGeocoder support address geocoding and reverse geocoding\n* `mapquest` : MapQuestGeocoder support address geocoding and reverse geocoding need an apiKey\n\n## Http adapter\n\n* `http`       : This adapter uses Http nodejs library (by default)\n* `requestify` : This adapter uses Requestify library (you need to install `requestify`)\n\n## Formatter\n\n* `gpx`    : format result using GPX format\n* `string` : format result to an String array (you need to specify `extra.formatterPattern` key)\n    * `%P` country\n    * `%p` country code\n    * `%n` street number\n    * `%S` street name\n    * `%z` zip code\n    * `%T` State\n    * `%t` state code\n\n\n## More\n\nYou can improve this project by adding new geocoders or http adapters.\n\nTo run tests just `npm test`\n\n## Extending node geocoder\n\nYou can add new geocoders by implementing the two method geocode & reverse:\n\n```javascript\nvar geocoder = {\n    geocode: function(value, callback) { },\n    reverse: function(lat, lng, callback) { }\n}\n```\n\n## Changelog\n\n### 1.1.0\n\n* add google geocoder language option\n",
  "readmeFilename": "README.md",
  "_id": "node-geocoder@1.1.0",
  "dist": {
    "shasum": "a01eacba4d85c255c3c7acda334b6fc1f2047220"
  },
  "_from": "node-geocoder@",
  "_resolved": "https://registry.npmjs.org/node-geocoder/-/node-geocoder-1.1.0.tgz"
}
